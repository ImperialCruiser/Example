Процедура ЛабквестОбработатьПолучение(ФайлРезультата, LisId, Заявка)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Лабквест_СтатусОтправок.ДокументРегистрации КАК ДокументРегистрации
	|ИЗ
	|	РегистрСведений.Лабквест_СтатусОтправок КАК Лабквест_СтатусОтправок
	|ГДЕ
	|	Лабквест_СтатусОтправок.LisId = &LisId";
	
	Запрос.УстановитьПараметр("LisId", LisId);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Заявка = ВыборкаДетальныеЗаписи.ДокументРегистрации;
	КонецЦикла;
	
	РезультатПоАналитам = Новый ТаблицаЗначений;
	РезультатПоАналитам.Колонки.Добавить("Тест", Новый ОписаниеТипов("СправочникСсылка.ЛабквестТесты"));
	РезультатПоАналитам.Колонки.Добавить("Результат", Новый ОписаниеТипов("Строка"));
	РезультатПоАналитам.Колонки.Добавить("Норма", Новый ОписаниеТипов("Строка"));
	РезультатПоАналитам.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	РезультатПоАналитам.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	РезультатПоАналитам.Колонки.Добавить("ИдентификаторУслуги", Новый ОписаниеТипов("УникальныйИдентификатор"));
	РезультатПоАналитам.Колонки.Добавить("ДатаВыполнения", Новый ОписаниеТипов("Дата"));
	РезультатПоАналитам.Колонки.Добавить("Исполнитель", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	РезультатПоАналитам.Колонки.Добавить("Интерпретация", Новый ОписаниеТипов("Строка"));	
	
	//создание протокола  
	
	НовыйПротокол = Документы.ПротоколИсследования_ЛИ.СоздатьДокумент();
	НовыйПротокол.Заполнить(Заявка);
	//НовыйПротокол.Дата = ТекущаяДата();
	ВрачЛаборатории = Константы.ЛабквестСотрудник.Получить();
	НовыйПротокол.Врач 			= ?(ЗначениеЗаполнено(ВрачЛаборатории), ВрачЛаборатории, Заявка.Врач); 
	Исполнитель = Константы.ЛабквестСотрудник.Получить();
	//Исполнитель = ?(ЗначениеЗаполнено(ВрачЛаборатории), ВрачЛаборатории, Заявка.Врач);
	
	Парсер = Новый ЧтениеXML;
	Парсер.ОткрытьФайл(ФайлРезультата);
	
	
	Построитель = Новый ПостроительDOM;
	
	Документ = Построитель.Прочитать(Парсер); 
	Для Каждого Элемент0 Из Документ.ЭлементДокумента.ДочерниеУзлы Цикл
		Если Элемент0.ИмяУзла = "Blanks" Тогда
			Blanks = Элемент0;  
			Для каждого Элемент1 Из Blanks.ДочерниеУзлы Цикл
				Если Элемент1.ИмяУзла = "Item" тогда   
					Item1 = Элемент1;
					ДатаТеста = Item1.Атрибуты.ПолучитьИменованныйЭлемент("DoneDate").Значение;	
					Для каждого Элемент2 Из Item1.ДочерниеУзлы цикл
						Если Элемент2.ИмяУзла = "Tests" тогда
							tests = Элемент2;
							Для каждого Элемент3 из tests.ДочерниеУзлы цикл
								Если Элемент3.ИмяУзла = "Item" тогда
									Item = Элемент3;	
									НовыйРезультат = РезультатПоАналитам.Добавить();
									ЛТест = ЛабквестПолучитьТестПоID(Item.Атрибуты.ПолучитьИменованныйЭлемент("Code").Значение);
									НовыйРезультат.Тест = ЛТест;
									ИдентификаторУслуги = ЛабквестНайтиИдентификаторПоКоду(Заявка, Item.Атрибуты.ПолучитьИменованныйЭлемент("OrderCode").Значение);
									НовыйРезультат.ИдентификаторУслуги = ИдентификаторУслуги;													
									НовыйРезультат.ДатаВыполнения = ДатаТеста;
									НовыйРезультат.Исполнитель = Исполнитель;
									НовыйРезультат.Результат = Item.Атрибуты.ПолучитьИменованныйЭлемент("Value").Значение;
									НовыйРезультат.Норма = Item.Атрибуты.ПолучитьИменованныйЭлемент("Norms").Значение; 
									НовыйРезультат.Комментарий = Item.Атрибуты.ПолучитьИменованныйЭлемент("Comment").Значение;
									НовыйРезультат.ЕдиницаИзмерения = ЛабквестПроверитьЕдиницуИзмерения(Item.Атрибуты.ПолучитьИменованныйЭлемент("UnitName").Значение);
									НовыйРезультат.Интерпретация = Item.Атрибуты.ПолучитьИменованныйЭлемент("NormsComment").Значение;
									
									
									
									
									///обработка итема
									Для каждого Элемент4 из Item.ДочерниеУзлы цикл
										Если Элемент4.ИмяУзла = "Microorganisms" тогда
											micro = Элемент4;
											///обработка микро
											НовыйРезультат = РезультатПоАналитам.Добавить();
											ЛТест = ЛабквестПолучитьТестПоID(Item.Атрибуты.ПолучитьИменованныйЭлемент("Code").Значение);
											НовыйРезультат.Тест = ЛТест;
											Найден = micro.Атрибуты.ПолучитьИменованныйЭлемент("Found").Значение;
											Если Найден = "true" тогда 
												НовыйРезультат.Результат = micro.Атрибуты.ПолучитьИменованныйЭлемент("Value").Значение;
											Иначе
												НовыйРезультат.Результат = "не обнаружено";
											КонецЕсли;
											
											
											Для каждого Элемент5 из micro.ДочерниеУзлы Цикл
												Если Элемент5.ИмяУзла = "Drugs" тогда
													Drugs = Элемент5;
													НовыйРезультат = РезультатПоАналитам.Добавить();
													ЛТест = ЛабквестПолучитьТестПоID(Item.Атрибуты.ПолучитьИменованныйЭлемент("Code").Значение);
													НовыйРезультат.Тест = ЛТест;
													НовыйРезультат.Результат = Drugs.Атрибуты.ПолучитьИменованныйЭлемент("Value").Значение;
												КонецЕсли;
											КонецЦикла;	
										КонецЕсли;	
									КонецЦикла;
									
									
								КонецЕсли
								
							КонецЦикла;
						КонецЕсли;	
					КонецЦикла;	
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	
	Парсер.Закрыть(); 
	
	НовыйПротокол.Образцы.Очистить();
	МассивНайденныхОбразцов = Новый Массив;
	
	Для каждого Услуга из НовыйПротокол.Услуги цикл
		Услуга.Выполнена = Истина;
		Услуга.Утверждена = Истина;
		Услуга.ДатаИсследования = ДатаТеста;
		Услуга.ДатаУтверждения = ДатаТеста;  
		
		
		МассивИДОбразца = ПолучитьИДОбразца(Услуга.ИдентификаторУслуги, Заявка);
		
		Для Каждого ИДОбразца из МассивИДОбразца Цикл 
			Если МассивНайденныхОбразцов.Найти(ИДОбразца) <> Неопределено Тогда
				Продолжить;	
			КонецЕсли;
			
			МассивНайденныхОбразцов.Добавить(ИДОбразца);
			
			СтрокиОтбораОбразцы = Заявка.Образцы.НайтиСтроки(Новый Структура("ИдентификаторОбразца", ИДОбразца));
			
			Для каждого оСтр из СтрокиОтбораОбразцы Цикл
				НовСтрОбразец = НовыйПротокол.Образцы.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрОбразец, оСтр);
			КонецЦикла;	
		КонецЦикла;
		
	КонецЦикла;	
	
	
	ЗаполнитьДиагноз(НовыйПротокол, Заявка);
	
	НовыйПротокол.Тесты.Загрузить(РезультатПоАналитам); 
	НовыйПротокол.ЗакрытьЗаявку = Истина;
	НовыйПротокол.Дата = ДатаТеста;
	
	
	НовыйПротокол.Записать(РежимЗаписиДокумента.Проведение);
	
	НаборЗаписей = РегистрыСведений.ОбразцыУслуг.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Заявка);
	НаборЗаписей.Прочитать();
	Для Каждого ЗаписьНаправления Из НаборЗаписей Цикл 
		Если НовыйПротокол.Услуги.Найти(ЗаписьНаправления.ИдентификаторУслуги, "ИдентификаторУслуги") <> Неопределено Тогда
			ЗаписьПротокола = РегистрыСведений.ОбразцыУслуг.СоздатьМенеджерЗаписи();
			ЗаписьПротокола.Документ = НовыйПротокол.Ссылка;
			ЗаписьПротокола.ИдентификаторОбразца = ЗаписьНаправления.ИдентификаторОбразца; 
			ЗаписьПротокола.ИдентификаторУслуги = ЗаписьНаправления.ИдентификаторУслуги;
			ЗаписьПротокола.Записать(Истина); 
		КонецЕсли;
	КонецЦикла;
	
	
	
	
	//создание протокола
	
	
	//лог результата	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(Документ, ЗаписьXML);	
	СтрокаРезультата = ЗаписьXML.Закрыть(); 
	//лог результата
	
	//запись в регистр
	Запись = РегистрыСведений.Лабквест_СтатусОтправок.СоздатьМенеджерЗаписи();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Лабквест_СтатусОтправок.ДокументРегистрации КАК ДокументРегистрации,
	|	Лабквест_СтатусОтправок.LisId КАК LisId,
	|	Лабквест_СтатусОтправок.Nr КАК Nr,
	|	Лабквест_СтатусОтправок.ДатаОтправки КАК ДатаОтправки,
	|	Лабквест_СтатусОтправок.Статус КАК Статус,
	|	Лабквест_СтатусОтправок.ДокументРезультатов КАК ДокументРезультатов,
	|	Лабквест_СтатусОтправок.ТекстОтправки КАК ТекстОтправки,
	|	Лабквест_СтатусОтправок.ТекстРезультата КАК ТекстРезультата,
	|	Лабквест_СтатусОтправок.ТекстКонечногоРезультата КАК ТекстКонечногоРезультата
	|ИЗ
	|	РегистрСведений.Лабквест_СтатусОтправок КАК Лабквест_СтатусОтправок
	|ГДЕ
	|	Лабквест_СтатусОтправок.LisId = &LisId";
	
	Запрос.УстановитьПараметр("LisId", LisId);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Запись.ДокументРегистрации = ВыборкаДетальныеЗаписи.ДокументРегистрации;
		Запись.LisId = ВыборкаДетальныеЗаписи.LisId; 
		Запись.Nr = ВыборкаДетальныеЗаписи.Nr;
		Запись.Статус = Перечисления.НАКФФ_СтатусЗаявки.РезультатПолучен;
		Запись.ДатаОтправки = ВыборкаДетальныеЗаписи.ДатаОтправки;
		Запись.ДокументРезультатов = НовыйПротокол.Ссылка;
		Запись.ТекстОтправки = ВыборкаДетальныеЗаписи.ТекстОтправки;
		Запись.ТекстРезультата = ВыборкаДетальныеЗаписи.ТекстРезультата;
		Запись.ТекстКонечногоРезультата = СтрокаРезультата;
		
	КонецЦикла;
	
	Запись.Записать(Истина);
	//запись в регистр
	
	
	
	
	
КонецПроцедуры    


Процедура ПрочитатьИЗаписатьКонечныйРезультат(ФайлРезультата, НомерНаправления) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАКФФ_СтатусОтправок.ДокументРегистрации КАК ДокументРегистрации
	|ИЗ
	|	РегистрСведений.НАКФФ_СтатусОтправок КАК НАКФФ_СтатусОтправок
	|ГДЕ
	|	НАКФФ_СтатусОтправок.Orderno = &Orderno";
	
	Запрос.УстановитьПараметр("Orderno", НомерНаправления);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Заявка = ВыборкаДетальныеЗаписи.ДокументРегистрации;
	КонецЦикла;
	
	РезультатПоАналитам = Новый ТаблицаЗначений;
	РезультатПоАналитам.Колонки.Добавить("Тест", Новый ОписаниеТипов("СправочникСсылка.Тесты"));
	РезультатПоАналитам.Колонки.Добавить("Результат", Новый ОписаниеТипов("Строка"));
	РезультатПоАналитам.Колонки.Добавить("Норма", Новый ОписаниеТипов("Строка"));
	РезультатПоАналитам.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	РезультатПоАналитам.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	РезультатПоАналитам.Колонки.Добавить("ИдентификаторУслуги", Новый ОписаниеТипов("УникальныйИдентификатор"));
	РезультатПоАналитам.Колонки.Добавить("ДатаВыполнения", Новый ОписаниеТипов("Дата"));
	РезультатПоАналитам.Колонки.Добавить("Исполнитель", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	
	
	//  РезультатПоАнтибиотикам = Новый ТаблицаЗначений;
	//  РезультатПоАнтибиотикам.Колонки.Добавить("Антибиотик", Новый ОписаниеТипов("Строка"));
	//  РезультатПоАнтибиотикам.Колонки.Добавить("Интерпретация", Новый ОписаниеТипов("Строка"));
	//
	//  РезультатПоМикроорганизмам = Новый ТаблицаЗначений;
	//  РезультатПоМикроорганизмам.Колонки.Добавить("Микроорганизм", Новый ОписаниеТипов("Строка"));
	//  РезультатПоМикроорганизмам.Колонки.Добавить("Результат", Новый ОписаниеТипов("Строка"));
	//  РезультатПоМикроорганизмам.Колонки.Добавить("Интерпретация", Новый ОписаниеТипов("Строка"));
	
	
	//создание протокола  
	
	НовыйПротокол = Документы.ПротоколИсследования_ЛИ.СоздатьДокумент();
	НовыйПротокол.Заполнить(Заявка);
	НовыйПротокол.Дата = ТекущаяДата();
	ВрачЛаборатории = Справочники.Сотрудники.НайтиПоКоду("00581");
	НовыйПротокол.Врач 			= ?(ЗначениеЗаполнено(ВрачЛаборатории), ВрачЛаборатории, Заявка.Врач); 
	
	Парсер = Новый ЧтениеXML;
	Парсер.ОткрытьФайл(ФайлРезультата);
	
	Построитель = Новый ПостроительDOM;
	
	Документ = Построитель.Прочитать(Парсер); 
	Для Каждого Элемент0 Из Документ.ЭлементДокумента.ДочерниеУзлы Цикл
		Если Элемент0.ИмяУзла = "personal" Тогда
			personal = Элемент0;
			Для каждого Элемент1 Из personal.ДочерниеУзлы Цикл
				Если Элемент1.ИмяУзла = "apprsts" тогда 
					Status = Элемент1.ТекстовоеСодержимое;
				ИначеЕсли Элемент1.ИмяУзла = "logdate" тогда
					Попытка
						logdate = ОбработкаДаты(Элемент1.ТекстовоеСодержимое);
					Исключение
						logdate = ТекущаяДата();
					КонецПопытки;
				КонецЕсли;
			КонецЦикла
		ИначеЕсли Элемент0.ИмяУзла = "orders" Тогда
			orders = Элемент0;
			Для Каждого Элемент2 из orders.ДочерниеУзлы цикл
				Если Элемент2.ИмяУзла = "panel" тогда
					panel = Элемент2;
					панелькод = panel.Атрибуты.ПолучитьИменованныйЭлемент("id").Значение;
					ИдентификаторУслуги = НайтиИдентификаторПоКоду(НовыйПротокол, панелькод);
					Для каждого Элемент3 из panel.ДочерниеУзлы Цикл
						Если Элемент3.ИмяУзла = "test" тогда
							test = Элемент3;
							Для каждого Элемент4 из test.ДочерниеУзлы Цикл
								Если Элемент4.ИмяУзла = "apprdate" тогда
									ДатаТеста = ОбработкаДаты(Элемент4.ТекстовоеСодержимое);
								ИначеЕсли Элемент4.ИмяУзла = "analyte" тогда
									analyte = Элемент4;
									НовыйРезультат = РезультатПоАналитам.Добавить();
									НовыйРезультат.Тест = ПолучитьТестПоID(analyte.Атрибуты.ПолучитьИменованныйЭлемент("id").Значение);
									НовыйРезультат.ИдентификаторУслуги = ИдентификаторУслуги;
									НовыйРезультат.ДатаВыполнения = ДатаТеста;
									НовыйРезультат.Исполнитель = ?(ЗначениеЗаполнено(ВрачЛаборатории), ВрачЛаборатории, НовыйПротокол.Врач);
									Для каждого ПолеТеста из analyte.ДочерниеУзлы цикл
										Если ПолеТеста.ИмяУзла = "result" тогда
											НовыйРезультат.Результат = ПолеТеста.ТекстовоеСодержимое;	
										ИначеЕсли ПолеТеста.ИмяУзла = "limits" тогда	
											НовыйРезультат.Норма = ПолеТеста.ТекстовоеСодержимое;	
										ИначеЕсли ПолеТеста.ИмяУзла = "comment" тогда
											НовыйРезультат.Комментарий = ПолеТеста.ТекстовоеСодержимое;
										ИначеЕсли ПолеТеста.ИмяУзла = "unit" тогда
											НовыйРезультат.ЕдиницаИзмерения = ПроверитьЕдиницуИзмерения(ПолеТеста.ТекстовоеСодержимое);
										КонецЕсли;	
									КонецЦикла;	
								ИначеЕсли Элемент4.ИмяУзла = "microorganism" тогда	
									microorganism = Элемент4; 
									НовыйРезультат = РезультатПоАналитам.Добавить(); 
									НовыйРезультат.Тест = ОбработатьАнтибиотикМикроорганизм(microorganism.Атрибуты.ПолучитьИменованныйЭлемент("name").Значение);
									НовыйРезультат.ИдентификаторУслуги = ИдентификаторУслуги;
									НовыйРезультат.ДатаВыполнения = ДатаТеста;
									НовыйРезультат.Исполнитель 			= ?(ЗначениеЗаполнено(ВрачЛаборатории), ВрачЛаборатории, НовыйПротокол.Врач);
									НовыйРезультат.Результат = microorganism.Атрибуты.ПолучитьИменованныйЭлемент("value").Значение;										//НовыйМикроорганизм = РезультатПоМикроорганизмам.Добавить();
									//НовыйМикроорганизм.Микроорганизм = microorganism.Атрибуты.ПолучитьИменованныйЭлемент("name").Значение;
									//НовыйМикроорганизм.Результат = microorganism.Атрибуты.ПолучитьИменованныйЭлемент("value").Значение; 
									Для каждого Элемент5 из microorganism.ДочерниеУзлы Цикл
										Если Элемент5.ИмяУзла = "antibiotic" тогда  
											НовыйРезультат = РезультатПоАналитам.Добавить(); 
											НовыйРезультат.Тест = ОбработатьАнтибиотикМикроорганизм(Элемент5.Атрибуты.ПолучитьИменованныйЭлемент("name").Значение);
											НовыйРезультат.ИдентификаторУслуги = ИдентификаторУслуги;
											НовыйРезультат.ДатаВыполнения = ДатаТеста;
											НовыйРезультат.Исполнитель 	= ?(ЗначениеЗаполнено(ВрачЛаборатории), ВрачЛаборатории, НовыйПротокол.Врач);
											НовыйРезультат.Результат = Элемент5.ТекстовоеСодержимое;		
											
											//НовыйАнтибиотик = РезультатПоАнтибиотикам.Добавить();	
											//НовыйАнтибиотик.Антибиотик = Элемент5.Атрибуты.ПолучитьИменованныйЭлемент("name").Значение;	
											//НовыйАнтибиотик.Интерпретация = Элемент5.ТекстовоеСодержимое;			
										КонецЕсли;	
										
									КонецЦикла;	
									
								КонецЕсли;
							КонецЦикла;	
						КонецЕсли;	
						
					КонецЦикла;	
				КонецЕсли;		 
			КонецЦикла;		 
		КонецЕсли;
	КонецЦикла;
	
	Парсер.Закрыть(); 
	
	НовыйПротокол.Образцы.Очистить();
	МассивНайденныхОбразцов = Новый Массив;
	
	Для каждого Услуга из НовыйПротокол.Услуги цикл
		Услуга.Выполнена = Истина;
		Услуга.Утверждена = Истина;
		Услуга.ДатаИсследования = logdate;
		Услуга.ДатаУтверждения = logdate;  
		
		
		МассивИДОбразца = ПолучитьИДОбразца(Услуга.ИдентификаторУслуги, Заявка);
		
		Для Каждого ИДОбразца из МассивИДОбразца Цикл 
			Если МассивНайденныхОбразцов.Найти(ИДОбразца) <> Неопределено Тогда
				Продолжить;	
			КонецЕсли;
			
			МассивНайденныхОбразцов.Добавить(ИДОбразца);
			
			СтрокиОтбораОбразцы = Заявка.Образцы.НайтиСтроки(Новый Структура("ИдентификаторОбразца", ИДОбразца));
			
			Для каждого оСтр из СтрокиОтбораОбразцы Цикл
				НовСтрОбразец = НовыйПротокол.Образцы.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрОбразец, оСтр);
			КонецЦикла;	
		КонецЦикла;
		
	КонецЦикла;	
	
	
	ЗаполнитьДиагноз(НовыйПротокол, Заявка);
	
	НовыйПротокол.Тесты.Загрузить(РезультатПоАналитам);
	//НовыйПротокол.Антибиотики.Загрузить(РезультатПоАнтибиотикам);
	//НовыйПротокол.Микроорганизмы.Загрузить(РезультатПоМикроорганизмам); 
	НовыйПротокол.ЗакрытьЗаявку = Истина;
	
	
	
	НовыйПротокол.Записать(РежимЗаписиДокумента.Проведение);
	
	НаборЗаписей = РегистрыСведений.ОбразцыУслуг.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Заявка);
	НаборЗаписей.Прочитать();
	Для Каждого ЗаписьНаправления Из НаборЗаписей Цикл 
		Если НовыйПротокол.Услуги.Найти(ЗаписьНаправления.ИдентификаторУслуги, "ИдентификаторУслуги") <> Неопределено Тогда
			ЗаписьПротокола = РегистрыСведений.ОбразцыУслуг.СоздатьМенеджерЗаписи();
			ЗаписьПротокола.Документ = НовыйПротокол.Ссылка;
			ЗаписьПротокола.ИдентификаторОбразца = ЗаписьНаправления.ИдентификаторОбразца; 
			ЗаписьПротокола.ИдентификаторУслуги = ЗаписьНаправления.ИдентификаторУслуги;
			ЗаписьПротокола.Записать(Истина); 
		КонецЕсли;
	КонецЦикла;
	
	//создание протокола
		
	//лог результата	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(Документ, ЗаписьXML);	
	СтрокаРезультата = ЗаписьXML.Закрыть(); 
	//лог результата
	
	//запись в регистр
	Запись = РегистрыСведений.НАКФФ_СтатусОтправок.СоздатьМенеджерЗаписи();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАКФФ_СтатусОтправок.ДокументРегистрации КАК ДокументРегистрации,
	|	НАКФФ_СтатусОтправок.Orderno КАК Orderno,
	|	НАКФФ_СтатусОтправок.ДатаОтправки КАК ДатаОтправки,
	|	НАКФФ_СтатусОтправок.Статус КАК Статус,
	|	НАКФФ_СтатусОтправок.ДокументРезультатов КАК ДокументРезультатов,
	|	НАКФФ_СтатусОтправок.ТекстОтправки КАК ТекстОтправки,
	|	НАКФФ_СтатусОтправок.ТекстРезультата КАК ТекстРезультата,
	|	НАКФФ_СтатусОтправок.ТекстКонечногоРезультата КАК ТекстКонечногоРезультата
	|ИЗ
	|	РегистрСведений.НАКФФ_СтатусОтправок КАК НАКФФ_СтатусОтправок
	|ГДЕ
	|	НАКФФ_СтатусОтправок.Orderno = &Orderno";
	
	Запрос.УстановитьПараметр("Orderno", НомерНаправления);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Запись.ДокументРегистрации = ВыборкаДетальныеЗаписи.ДокументРегистрации;
		Запись.Orderno = ВыборкаДетальныеЗаписи.Orderno;
		Запись.Статус = Перечисления.НАКФФ_СтатусЗаявки.РезультатПолучен;
		Запись.ДатаОтправки = ВыборкаДетальныеЗаписи.ДатаОтправки;
		Запись.ДокументРезультатов = НовыйПротокол.Ссылка;
		Запись.ТекстОтправки = ВыборкаДетальныеЗаписи.ТекстОтправки;
		Запись.ТекстРезультата = ВыборкаДетальныеЗаписи.ТекстРезультата;
		Запись.ТекстКонечногоРезультата = СтрокаРезультата;
		
	КонецЦикла;
	
	Запись.Записать(Истина);
	//запись в регистр
	

КонецПроцедуры 
